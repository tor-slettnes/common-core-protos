// -*- Protocol-Buffers -*-
//==============================================================================
/// @file multilogger.proto
/// @brief MultiLogger gRPC interface
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.platform.multilogger.grpc;

import "google/protobuf/empty.proto";
import "cc/platform/multilogger/protobuf/multilogger_types.proto";

service MultiLogger
{
    // Log a single message.
    rpc Submit (multilogger.protobuf.Loggable)
        returns (google.protobuf.Empty);

    // Open a writable stream for continuous logging
    rpc Writer (stream multilogger.protobuf.Loggable)
        returns (google.protobuf.Empty);

    // Open a readable stream for continuous monitoring.  A new log sink is
    // created on the server side to capture events on behalf of the client.
    rpc Listen (multilogger.protobuf.ListenerSpec)
        returns (stream multilogger.protobuf.Loggable);

    // Add a new log sink to capture events meeting the specified criteria.
    rpc AddSink (multilogger.protobuf.SinkSpec)
        returns (multilogger.protobuf.AddSinkResult);

    // Delete an existing data contract.  This may remove corresponding log
    // sinks.
    rpc RemoveSink (multilogger.protobuf.SinkID)
        returns (multilogger.protobuf.RemoveSinkResult);

    // Return definition for a single log sink
    rpc GetSink (multilogger.protobuf.SinkID)
        returns (multilogger.protobuf.SinkSpec);

    // Return defintions for all available log sinks
    rpc GetAllSinks (google.protobuf.Empty)
        returns (multilogger.protobuf.SinkSpecs);

    // Return defintions for all available log sinks
    rpc ListSinks (google.protobuf.Empty)
        returns (multilogger.protobuf.SinkNames);

    // Return defintions for all available log sinks
    rpc ListSinkTypes (google.protobuf.Empty)
        returns (multilogger.protobuf.SinkTypes);

    // Return a list of keys corresponding to fields log messages, more or less
    // the static field names from `Message`, below.  These can be included as
    // `contract_fields` when adding a CSV or DB sink with contract id
    // `text`.
    rpc ListMessageFields (google.protobuf.Empty)
        returns (multilogger.protobuf.FieldNames);

    // Return a list of keys corresponding to fields in logged errors, more or
    // less the static field names from `cc.protobuf.status.Error`. These can be included
    // as `contract_fields` when adding a CSV or DB sink with contract id
    // `error`.
    rpc ListErrorFields (google.protobuf.Empty)
        returns (multilogger.protobuf.FieldNames);
}
